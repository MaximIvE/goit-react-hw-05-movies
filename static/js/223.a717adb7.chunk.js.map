{"version":3,"file":"static/js/223.a717adb7.chunk.js","mappings":"qQAEaA,EAAOC,EAAAA,GAAAA,GAAH,+C,SCUjB,EATiB,SAAC,GAAe,IAAD,IAAbC,KAAAA,OAAa,MAAR,GAAQ,EACtBC,GAAWC,EAAAA,EAAAA,MACXC,EAAOH,EAAKI,KAAI,SAAAC,GAAK,OACvB,yBACG,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAME,IAAMC,MAAO,CAACC,KAAMR,GAA/C,SAA2DI,EAAMK,SAD3DL,EAAME,GADQ,IAI3B,OAAO,SAACT,EAAD,UAAOK,GACjB,E,UCRYQ,EAAcZ,EAAAA,GAAAA,IAAH,kFCuCxB,EAnCc,SAAC,GAAa,IAAZa,EAAW,EAAXA,MACZ,GAAwBC,EAAAA,EAAAA,WAAS,iBAAI,EAAJ,IAAjC,eAAOb,EAAP,KAAac,EAAb,KACA,GAA0BD,EAAAA,EAAAA,WAAS,kBAAI,IAAJ,IAAnC,eAAOE,EAAP,KAAcC,EAAd,KACA,GAA8BH,EAAAA,EAAAA,WAAS,kBAAI,CAAJ,IAAvC,eAAOI,EAAP,KAAgBC,EAAhB,KACA,GAAwBL,EAAAA,EAAAA,WAAS,iBAAI,EAAJ,IAAjC,eAAOV,EAAP,KAAagB,EAAb,KAqBA,OAnBAC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAW,mCAAG,gGAChBL,EAAS,MACTE,GAAW,GACPI,EAAM,MACPV,EAJa,kCAIMW,EAAAA,EAAAA,IAASX,GAJf,OAINU,EAJM,iDAI0CE,EAAAA,EAAAA,MAJ1C,QAI8BF,EAJ9B,kBAKY,MAAfA,EAAIG,OALD,uBAKwB,IAAIC,MAAJ,UAAcJ,EAAIG,OAAlB,cAA8BH,EAAIK,aAL1D,QAMuB,IAA5BL,EAAItB,KAAK4B,QAAQC,QAAcV,EAAQ,sBAAD,OAAuBP,EAAvB,MACzCM,GAAW,GACXJ,EAAQQ,EAAItB,KAAK4B,SART,kDAWZZ,EAAS,EAAD,IACRE,GAAW,GACXJ,EAAQ,IAbI,kEAAH,qDAebO,GACP,GAAC,CAACT,KAGC,UAACD,EAAD,WACKX,EAAK6B,OAAS,IAAK,SAAC,EAAD,CAAU7B,KAAMA,IACnCiB,IAAW,uCACXF,IAAS,6DACTZ,IAAQ,wBAAKA,MAGzB,C,6FCrCY2B,E,QAAU/B,GAAAA,IAAH,+F,SCWpB,EAVa,WAET,OACI,UAAC+B,EAAD,YACI,4CACC,SAACC,EAAA,EAAD,MAGZ,C,mMCRKC,E,MAAYC,GAAAA,OAAa,CAC3BC,QAAS,gCACTC,OAAO,CACHC,QAAS,sCAKJZ,EAAU,mCAAG,8FAAkBQ,EAASK,IAAI,sBAA/B,mFAAH,qDAGVd,EAAQ,mCAAG,WAAMe,GAAN,iFAAqBN,EAASK,IAAI,eAAe,CACjEF,OAAO,CACHI,eAAe,EACfD,MAAAA,KAHY,mFAAH,sDAQRE,EAAS,mCAAG,WAAMC,GAAN,iFAAuBT,EAASK,IAAT,gBAAsBI,IAA7C,mFAAH,sDAGTC,EAAO,mCAAG,WAAMD,GAAN,iFAAuBT,EAASK,IAAT,gBAAsBI,EAAtB,aAAvB,mFAAH,sDAGPE,EAAU,mCAAG,WAAMF,GAAN,iFAAuBT,EAASK,IAAT,gBAAsBI,EAAtB,aAAvB,mFAAH,qD","sources":["components/PostList/PostList.styled.jsx","components/PostList/PostList.jsx","components/Posts/Posts.styled.jsx","components/Posts/Posts.jsx","pages/HomePage/HomePage.styled.jsx","pages/HomePage/HomePage.jsx","shared/api/moviesApi.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ol`\n    font-size: large;\n`;","import { Link, useLocation } from 'react-router-dom';\nimport { List } from './PostList.styled';\n\nconst PostList = ({data=[]}) => {\n    const location = useLocation();\n    const info = data.map(movie => \n        <li key={movie.id}>\n           <Link to={`/movies/${movie.id}`} state={{from: location}}>{movie.title}</Link> \n        </li>);\n    return <List>{info}</List>\n}\n\nexport default PostList;","import styled from 'styled-components';\n\nexport const PostsStyled = styled.div`\n    padding: 0 20px 10px 20px;\n    margin-bottom: 20px;\n`;","import { useState, useEffect } from 'react';\n\nimport PostList from 'components/PostList';\nimport { getPopular, getQuery } from '../../shared/api/moviesApi';\nimport { PostsStyled } from './Posts.styled';\n\nconst Posts = ({qwery}) => {\n    const [data, setData] = useState(()=>[]);\n    const [error, setError] = useState(()=>null);\n    const [loading, setLoading] = useState(()=>false);\n    const [info, setInfo] = useState(()=>\"\");\n\n    useEffect(()=>{\n        const fetchMovies = async() => {\n        try{setError(null);\n            setLoading(true);\n            let res = null;\n            if(qwery){res = await getQuery(qwery);} else {res = await getPopular();}\n                    if ( res.status !== 200){ throw new Error (`${res.status} | ${res.statusText}`)};\n                    if(res.data.results.length === 0)(setInfo(`No movies found by ${qwery}.`));\n                    setLoading(false);\n                    setData(res.data.results);\n                \n        } catch (error) {\n                setError(error);\n                setLoading(false);\n                setData([]);\n        };};\n            fetchMovies();\n    },[qwery]);\n    \n    return (\n        <PostsStyled>\n            {data.length > 0 && <PostList data={data}/>}\n            {loading && <h2>Loading...</h2>}\n            {error && <h2>Error.  Unable to display movies</h2>}\n            {info && <h3>{info}</h3>}\n        </PostsStyled>\n    )\n}\n\nexport default Posts;","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n    font-size: large;\n    padding: 0 20px;\n    margin-bottom: 20px;\n`;","import Posts from '../../components/Posts/Posts';\nimport { Wrapper } from './HomePage.styled';\n\nconst Home = () => {\n\n    return (\n        <Wrapper>\n            <h1>Tranding today</h1>\n            {<Posts />}\n        </Wrapper>\n    )\n}\n\nexport default Home;","import axios from 'axios';\n\n// Екземпляр класу\nconst instance  = axios.create({\n    baseURL: \"https://api.themoviedb.org/3/\",\n    params:{\n        api_key: \"833791a5e754a1f0443be5fc62646bdb\",\n    }\n});\n\n// Популярні за 1 день\nexport const getPopular = async () => await instance.get('trending/movie/day');\n\n// Пошук фільму ключовим словом &language=en-US&page=1&include_adult=false\nexport const getQuery = async query => await instance.get('search/movie',{\n        params:{\n            include_adult: false,\n            query,\n        }\n    });\n\n// Запит повної інформації про фільм &language=en-US\nexport const getDetals = async movieId => await instance.get(`movie/${movieId}`);\n\n// запит інформації про акторський склад &language=en-US\nexport const getCast = async movieId => await instance.get(`movie/${movieId}/credits`);\n\n// запит оглядів для сторінки кінофільму &language=en-US&page=1\nexport const getReviews = async movieId => await instance.get(`movie/${movieId}/reviews`);"],"names":["List","styled","data","location","useLocation","info","map","movie","to","id","state","from","title","PostsStyled","qwery","useState","setData","error","setError","loading","setLoading","setInfo","useEffect","fetchMovies","res","getQuery","getPopular","status","Error","statusText","results","length","Wrapper","Posts","instance","axios","baseURL","params","api_key","get","query","include_adult","getDetals","movieId","getCast","getReviews"],"sourceRoot":""}